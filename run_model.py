from subprocess import Popen

# QUICK RUNS (for immediate results)
epochs = [50]
batch_sizes = [1]
lrs = [1e-5, 1e-4, 1e-2]
momentums = [0.9]
vals = [0.1]
seeds = [0]
total_imageses = [50]
net_sizes = [[1,32,32,64,1024]]

i=0
    
for epoch in epochs:
    for batch_size in batch_sizes:
        for lr in lrs:
            for total_images in total_imageses:
                for net_size in net_sizes:
                    i += 1
                    run_name = 'quick' + str(i)
                    command = ["python", "model.py", 
                                "-n", str(run_name),
                                "-e", str(epoch),
                                "-b", str(batch_size),
                                "-lr", str(lr),
                                "-ti", str(total_images),
                                "-ns", str(net_size[0]), str(net_size[1]), str(net_size[2]),  str(net_size[3]), str(net_size[4]),
                                "-gpu", str(0)]
                                # "-m", momentum,
                                # "-v", val,
                                # "-s", seed,
                                # ""]
                    print(command)
                    p = Popen(command)
                    (output, err) = p.communicate()


# name generated by for loop...
# epochs = [30]
# batch_sizes = [2]
# lrs = [1e-3]
# momentums = [0.9]
# vals = [0.1]
# seeds = [0]
# total_imageses = [10, 300, 5000]
# net_sizes = [[1,128,256,512,1024],[1,16,32,64,1024]]


# i=0
    
# for epoch in epochs:
#     for batch_size in batch_sizes:
#         for lr in lrs:
#             for total_images in total_imageses:
#                 for net_size in net_sizes:
#                     i += 1
#                     run_name = 'run' + str(i)
#                     command = ["python", "model.py", 
#                                 "-n", str(run_name),
#                                 "-e", str(epoch),
#                                 "-b", str(batch_size),
#                                 "-lr", str(lr),
#                                 "-ti", str(total_images),
#                                 "-ns", str(net_size[0]), str(net_size[1]), str(net_size[2]),  str(net_size[3]), str(net_size[4]),
#                                 "-gpu", str(1)]
#                                 # "-m", momentum,
#                                 # "-v", val,
#                                 # "-s", seed,
#                                 # ""]
#                     print(command)
#                     p = Popen(command)
#                     (output, err) = p.communicate()

# Was also run on larger models, except they were all the 300 model.
# also these may have been run on AbstractDeclarativeNode instead of EqConstrainedDeclarativeNode
# ['python', 'model.py', '-n', 'run3', '-e', '30', '-b', '1', '-lr', '1e-08', '-ti', '300', '-ns', '1', '128', '256', '512', '1024']
# ['python', 'model.py', '-n', 'run4', '-e', '30', '-b', '1', '-lr', '1e-08', '-ti', '300', '-ns', '1', '16', '32', '64', '1024']
# ['python', 'model.py', '-n', 'run9', '-e', '30', '-b', '1', '-lr', '0.0001', '-ti', '300', '-ns', '1', '128', '256', '512', '1024']
# ['python', 'model.py', '-n', 'run10', '-e', '30', '-b', '1', '-lr', '0.0001', '-ti', '300', '-ns', '1', '16', '32', '64', '1024']

# addition of LrReduceOnPlateau
# quicks..
# slowers...